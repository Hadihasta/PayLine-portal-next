// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          BigInt      @id @default(autoincrement())
  email       String      @unique
  name        String
  phoneNumber String?
  role        String?
  is_active   Boolean     @default(true)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  carts       Cart[]
  orders      Order[]
}

model Cart {
  id          BigInt      @id @default(autoincrement())
  user_id     BigInt
  user        User        @relation(fields: [user_id], references: [id])
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relasi ke Payment (1 cart : 1 payment)
  payment     Payment?    @relation("CartPayment")

  // Relasi ke Order (1 cart : 1 order)
  order       Order?

  @@map("carts")
}

model Payment {
  id              BigInt     @id @default(autoincrement())
  cart_id         BigInt     @unique                     // penting untuk 1:1
  method          String
  midtrans_id     String?
  gross_amount    Decimal
  payment_method  String?
  bank            String?
  payment_receipt String?
  status          String?
  invoice         String?
  midtrans_data   Json?
  paid_at         DateTime   @default(now())

  // Relasi ke Cart (1:1)
  cart            Cart       @relation("CartPayment", fields: [cart_id], references: [id])

  // Relasi opsional ke Order (1 payment : 1 order)
  order           Order?

  @@map("payments")
}

model Order {
  id              BigInt     @id @default(autoincrement())
  user_id         BigInt
  cart_id         BigInt     @unique                     // karena 1 cart = 1 order
  payment_id      BigInt?    @unique                     // karena 1 order = 1 payment (opsional)
  status          String     @default("pending")
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  user            User       @relation(fields: [user_id], references: [id])
  cart            Cart       @relation(fields: [cart_id], references: [id])
  payment         Payment?   @relation(fields: [payment_id], references: [id])

  @@map("orders")
}
